<?xml version="1.0" ?>
<project name="Jaoss Web Template" default="test">

    <property name="project.dir" value="." />
    <property name="tests.dir" value="tests" />
    <property name="reports.dir" value="reports" />
    <property name="reportsFull.dir" value="tests/reports" />
    <property name="coverage.dir" value="coverage" />
    <property name="mode" value="test" override="true" />

    <target name="cleanup" description="Empty Temporary Dirs">
        <if>
            <isset property="chmodTmpDirs" />
            <then>
                <echo msg="Making folders writable" />
                <exec passthru="false" command="chmod -R 0777 tmp/ log/" />
            </then>
        </if>
        <if>
            <isset property="deleteLogs" />
            <then>
                <echo msg="Deleting log files..." />
                <delete>
                    <fileset dir="log">
                        <include name="*.log" />
                    </fileset>
                </delete>
            </then>
        </if>
        <delete>
            <fileset dir="tmp/templates_c">
                <include name="*.tpl.php" />
                <include name="wrt*" />
            </fileset>
            <fileset dir="${tests.dir}/${reports.dir}">
                <include name="*.xml" />
                <include name="*.sc" />
            </fileset>
            <fileset dir="${tests.dir}/${reports.dir}/${coverage.dir}">
                <include name="*.html" />
                <include name="*.xml" />
            </fileset>
        </delete>
    </target>

    <target name="reset" description="Reset Test State" depends="cleanup">
        <exec checkreturn="true" passthru="true" command="PROJECT_MODE=${mode} ./jcli fixture update-db --no-colour" />
    </target>

    <target name="test" description="PHPUnit tests" depends="cleanup">
        <echo msg="Running Test Suite" />
        <exec checkreturn="true" passthru="true" command="PROJECT_MODE=${mode} phpunit" />
    </target>

    <target name="fulltest" description="All Tests" depends="cleanup,test">
        <exec checkreturn="true" passthru="true" command="PROJECT_MODE=${mode} /usr/local/bin/mocha --reporter dot" />
    </target>

    <target name="mocha">
        <exec checkreturn="true" passthru="true" command="PROJECT_MODE=${mode} /usr/local/bin/mocha" />
    </target>

    <target name="sloc" description="Generate SLOC">
        <echo msg="Generating SLOC" />
        <exec checkreturn="true" passthru="false" command="sloccount --wide --details . 2>/dev/null | grep -v 'Smarty/' > ${tests.dir}/${reports.dir}/sloccount.sc" />
    </target>

    <target name="build" description="Build (excluding selenium tests)" depends="cleanup,sloc">
        <echo msg="Running Tests &amp; Generating Reports" />
        <exec checkreturn="true" passthru="true" command="PROJECT_MODE=${mode} phpunit --log-junit ${reportsFull.dir}/test-results.xml 
        --coverage-clover ${reportsFull.dir}/phpunit.coverage.xml
        --coverage-html ${reportsFull.dir}/${coverage.dir}
        --exclude-group selenium" />
    </target>

    <target name="fullbuild" description="Full Project Build" depends="cleanup,sloc">
        <echo msg="Cleaning up, Running Tests &amp; Generating Reports" />
        <exec checkreturn="true" passthru="true" command="PROJECT_MODE=${mode} phpunit --log-junit ${reportsFull.dir}/test-results.xml 
        --coverage-html ${reportsFull.dir}/${coverage.dir}
        --coverage-clover ${reportsFull.dir}/phpunit.coverage.xml" />
        <exec checkreturn="true" passthru="true" command="PROJECT_MODE=${mode} /usr/local/bin/mocha --reporter xunit > ${reportsFull.dir}/mocha-test-results.xml" />
    </target>

    <property name="tmp_exists" value="0" />

    <target name="uploads">
        <echo msg="Testing existence of remote uploads folder..." />
        <exec command="ssh ${remote_user}@${remote_host} 'test -d ${remote_dir}/uploads'" returnProperty="remote.uploads" />
        <if>
            <!-- rememeber, in bash land, non-zero exit is a failure -->
            <equals arg1="1" arg2="${remote.uploads}" />
            <then>
                <property name="tmp_exists" value="1" override="true" />

                <exec command="git tag | grep 'test-release-' | cut -d '-' -f 3 | sort -n -r | head -n 1" outputProperty="release_tag" />
                <property name="release_tag" value="test-release-${release_tag}" override="true" />

                <echo msg="Uploads directory does not exist. Syncing..." />
                <delete dir="/tmp/${release_tag}" />
                <copy todir="/tmp/${release_tag}" includeemptydirs="true">
                    <fileset dir="." defaultexcludes="false" />
                </copy>
                <echo msg="Cleaning up index" />
                <exec checkreturn="true" passthru="true" command="cd /tmp/${release_tag}; git clean -x -d -f public/uploads;" />
                <echo msg="Compressing uploads" />
                <tar destfile="/tmp/${release_tag}.tar.bz2" basedir="/tmp/${release_tag}/public/uploads" compression="bzip2" />
                <echo msg="Copying to remote host" />
                <exec checkreturn="true" passthru="true" command="scp /tmp/${release_tag}.tar.bz2 ${remote_user}@${remote_host}:${remote_dir}" />
                <echo msg="Setting up uploads directory" />
                <exec checkreturn="true" passthru="true" command="ssh ${remote_user}@${remote_host}
                    'mkdir ${remote_dir}/uploads;
                    tar -xjf ${remote_dir}/${release_tag}.tar.bz2 -C ${remote_dir}/uploads;
                    chgrp ${remote_group} ${remote_dir}/uploads -R;
                    chmod 0775 ${remote_dir}/uploads -R;
                    rm -f ${remote_dir}/${release_tag}.tar.bz2;'" />
                <echo msg="Uploads synced successfully" />
                <echo msg="Cleaning up" />
                <exec checkreturn="true" passthru="true" command="rm -f /tmp/${release_tag}.tar.bz2" />
                <echo msg="Done!" />
            </then>
            <else>
                <echo msg="uploads directory exists, nothing to sync" />
            </else>
        </if>
    </target>

    <target name="migratedb">
        <phing phingfile="common.xml" target="common-migrate" />
    </target>

    <target name="dist" depends="uploads">
        <echo msg="Fetching release tag" />
        <exec command="git tag | grep 'test-release-' | cut -d '-' -f 3 | sort -n -r | head -n 1" outputProperty="release_tag" />
        <property name="release_tag" value="test-release-${release_tag}" override="true" />
        <echo msg="Release tag is ${release_tag}${line.separator}" />

        <phing phingfile="common.xml" target="common-release" />

        <echo msg="Copying to remote host" />
        <exec checkreturn="true" passthru="true" command="scp /tmp/${release_tag}.tar.bz2 ${remote_user}@${remote_host}:${remote_dir}" />

        <echo msg="Setting up remote project" />
        <exec checkreturn="true" passthru="true" command="ssh ${remote_user}@${remote_host}
            'mkdir ${remote_dir}/${release_tag};
            tar -xjf ${remote_dir}/${release_tag}.tar.bz2 -C ${remote_dir}/${release_tag};
            chgrp ${remote_group} ${remote_dir}/${release_tag} -R;
            chmod 0775 ${remote_dir}/${release_tag}/tmp/ ${remote_dir}/${release_tag}/log/ -R;
            ln -s ${remote_dir}/uploads ${remote_dir}/${release_tag}/public/uploads;'" />

        <echo msg="Switching symlink" />
        <exec checkreturn="true" command="ssh ${remote_user}@${remote_host}
            'ln -s ${remote_dir}/${release_tag} ${remote_symlink}_tmp &amp;&amp; mv -Tf ${remote_symlink}_tmp ${remote_symlink};'" />

        <echo msg="Cleaning up" />
        <exec checkreturn="true" command="ssh ${remote_user}@${remote_host}
            'rm -rf ${remote_dir}/*.tar.bz2'" />
        <exec checkreturn="true" passthru="true" command="rm -f /tmp/${release_tag}.tar.bz2" />

        <echo msg="Done!" />
    </target>

    <target name="pre-release">
        <exec command="git fetch --tags" />

        <exec command="git tag | grep 'test-release-' | cut -d '-' -f 3 | sort -n -r | head -n 1" outputProperty="lastRelease" />
        <exec command="echo ${lastRelease} | awk '{ print $1 + 1 }'" outputProperty="nextRelease" />

        <echo msg="" />
        <echo msg="Next release will be test-release-${nextRelease}" />
        <echo msg="" />

        <exec command='git log test-release-${lastRelease}..HEAD --no-merges --pretty=format:"%an, %ad - %s (%h)" --date=local' outputProperty="releaseChanges" />
        <if>
            <equals arg1="" arg2="${releaseChanges}" />
            <then>
                <echo msg="${line.separator}${line.separator}WARNING: No differences detected between release versions. Is this correct?${line.separator}" />
            </then>
            <else>
                <echo msg="${line.separator}${line.separator}${releaseChanges}${line.separator}" />
            </else>
        </if>
    </target>

    <target name="prepare-release">
        <exec command="git tag | grep 'test-release-' | cut -d '-' -f 3 | sort -n -r | head -n 1" outputProperty="lastRelease" />
        <exec command="echo ${lastRelease} | awk '{ print $1 + 1 }'" outputProperty="nextRelease" />
        <exec command="git tag test-release-${nextRelease}" />

        <echo msg="" />
        <echo msg="Release tagged as test-release-${nextRelease}" />
        <echo msg="" />

        <exec command="git push --tags" />
    </target>
</project>
